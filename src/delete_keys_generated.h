// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DELETEKEYS_H_
#define FLATBUFFERS_GENERATED_DELETEKEYS_H_

#include "flatbuffers/flatbuffers.h"

struct DeleteKeysRequest;
struct DeleteKeysRequestBuilder;

struct DeleteKeysRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef DeleteKeysRequestBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE { VT_KEYS = 4 };
    const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *keys() const {
        return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(
            VT_KEYS);
    }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_KEYS) &&
               verifier.VerifyVector(keys()) && verifier.VerifyVectorOfStrings(keys()) &&
               verifier.EndTable();
    }
};

struct DeleteKeysRequestBuilder {
    typedef DeleteKeysRequest Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_keys(
        flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys) {
        fbb_.AddOffset(DeleteKeysRequest::VT_KEYS, keys);
    }
    explicit DeleteKeysRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    flatbuffers::Offset<DeleteKeysRequest> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<DeleteKeysRequest>(end);
        return o;
    }
};

inline flatbuffers::Offset<DeleteKeysRequest> CreateDeleteKeysRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys = 0) {
    DeleteKeysRequestBuilder builder_(_fbb);
    builder_.add_keys(keys);
    return builder_.Finish();
}

inline flatbuffers::Offset<DeleteKeysRequest> CreateDeleteKeysRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *keys = nullptr) {
    auto keys__ = keys ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*keys) : 0;
    return CreateDeleteKeysRequest(_fbb, keys__);
}

inline const DeleteKeysRequest *GetDeleteKeysRequest(const void *buf) {
    return flatbuffers::GetRoot<DeleteKeysRequest>(buf);
}

inline const DeleteKeysRequest *GetSizePrefixedDeleteKeysRequest(const void *buf) {
    return flatbuffers::GetSizePrefixedRoot<DeleteKeysRequest>(buf);
}

inline bool VerifyDeleteKeysRequestBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifyBuffer<DeleteKeysRequest>(nullptr);
}

inline bool VerifySizePrefixedDeleteKeysRequestBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifySizePrefixedBuffer<DeleteKeysRequest>(nullptr);
}

inline void FinishDeleteKeysRequestBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                          flatbuffers::Offset<DeleteKeysRequest> root) {
    fbb.Finish(root);
}

inline void FinishSizePrefixedDeleteKeysRequestBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                                      flatbuffers::Offset<DeleteKeysRequest> root) {
    fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_DELETEKEYS_H_
