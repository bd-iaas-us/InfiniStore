// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_METAREQUEST_H_
#define FLATBUFFERS_GENERATED_METAREQUEST_H_

#include "flatbuffers/flatbuffers.h"

struct RemoteMetaRequest;
struct RemoteMetaRequestBuilder;

struct RemoteMetaRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    typedef RemoteMetaRequestBuilder Builder;
    enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
        VT_KEYS = 4,
        VT_BLOCK_SIZE = 6,
        VT_RKEY = 8,
        VT_REMOTE_ADDRS = 10,
        VT_OP = 12
    };
    const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *keys() const {
        return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(
            VT_KEYS);
    }
    int32_t block_size() const { return GetField<int32_t>(VT_BLOCK_SIZE, 0); }
    uint32_t rkey() const { return GetField<uint32_t>(VT_RKEY, 0); }
    const flatbuffers::Vector<uint64_t> *remote_addrs() const {
        return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_REMOTE_ADDRS);
    }
    int8_t op() const { return GetField<int8_t>(VT_OP, 0); }
    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_KEYS) &&
               verifier.VerifyVector(keys()) && verifier.VerifyVectorOfStrings(keys()) &&
               VerifyField<int32_t>(verifier, VT_BLOCK_SIZE) &&
               VerifyField<uint32_t>(verifier, VT_RKEY) &&
               VerifyOffset(verifier, VT_REMOTE_ADDRS) && verifier.VerifyVector(remote_addrs()) &&
               VerifyField<int8_t>(verifier, VT_OP) && verifier.EndTable();
    }
};

struct RemoteMetaRequestBuilder {
    typedef RemoteMetaRequest Table;
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;
    void add_keys(
        flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys) {
        fbb_.AddOffset(RemoteMetaRequest::VT_KEYS, keys);
    }
    void add_block_size(int32_t block_size) {
        fbb_.AddElement<int32_t>(RemoteMetaRequest::VT_BLOCK_SIZE, block_size, 0);
    }
    void add_rkey(uint32_t rkey) { fbb_.AddElement<uint32_t>(RemoteMetaRequest::VT_RKEY, rkey, 0); }
    void add_remote_addrs(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> remote_addrs) {
        fbb_.AddOffset(RemoteMetaRequest::VT_REMOTE_ADDRS, remote_addrs);
    }
    void add_op(int8_t op) { fbb_.AddElement<int8_t>(RemoteMetaRequest::VT_OP, op, 0); }
    explicit RemoteMetaRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
        start_ = fbb_.StartTable();
    }
    flatbuffers::Offset<RemoteMetaRequest> Finish() {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<RemoteMetaRequest>(end);
        return o;
    }
};

inline flatbuffers::Offset<RemoteMetaRequest> CreateRemoteMetaRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys = 0,
    int32_t block_size = 0, uint32_t rkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> remote_addrs = 0, int8_t op = 0) {
    RemoteMetaRequestBuilder builder_(_fbb);
    builder_.add_remote_addrs(remote_addrs);
    builder_.add_rkey(rkey);
    builder_.add_block_size(block_size);
    builder_.add_keys(keys);
    builder_.add_op(op);
    return builder_.Finish();
}

inline flatbuffers::Offset<RemoteMetaRequest> CreateRemoteMetaRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *keys = nullptr,
    int32_t block_size = 0, uint32_t rkey = 0, const std::vector<uint64_t> *remote_addrs = nullptr,
    int8_t op = 0) {
    auto keys__ = keys ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*keys) : 0;
    auto remote_addrs__ = remote_addrs ? _fbb.CreateVector<uint64_t>(*remote_addrs) : 0;
    return CreateRemoteMetaRequest(_fbb, keys__, block_size, rkey, remote_addrs__, op);
}

inline const RemoteMetaRequest *GetRemoteMetaRequest(const void *buf) {
    return flatbuffers::GetRoot<RemoteMetaRequest>(buf);
}

inline const RemoteMetaRequest *GetSizePrefixedRemoteMetaRequest(const void *buf) {
    return flatbuffers::GetSizePrefixedRoot<RemoteMetaRequest>(buf);
}

inline bool VerifyRemoteMetaRequestBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifyBuffer<RemoteMetaRequest>(nullptr);
}

inline bool VerifySizePrefixedRemoteMetaRequestBuffer(flatbuffers::Verifier &verifier) {
    return verifier.VerifySizePrefixedBuffer<RemoteMetaRequest>(nullptr);
}

inline void FinishRemoteMetaRequestBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                          flatbuffers::Offset<RemoteMetaRequest> root) {
    fbb.Finish(root);
}

inline void FinishSizePrefixedRemoteMetaRequestBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                                      flatbuffers::Offset<RemoteMetaRequest> root) {
    fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_METAREQUEST_H_
